# name: Spring-Websocket

# on:
#   push:
#     branches: [ "main" ]

# jobs:

#   build:

#     runs-on: ['self-hosted', 'Linux', 'X64' ]

#     steps:
#     - uses: actions/checkout@v2

#     - name: Set up JDK 17
#       uses: actions/setup-java@v2
#       with:
#         java-version: '17'
#         distribution: 'adopt'
#     - name: Login to Docker Hub
#       uses: docker/login-action@v2
#       with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Delete old Docker image
#       run: docker image rm harshsrivastav2003/react-image || true

#     - name: Build Docker image
#       run: docker build -t harshsrivastav2003/socket .

#     - name: Push Docker image to Docker Hub
#       run: docker push harshsrivastav2003/socket    
    
#     - name: stop old container1
#       run: sudo docker container stop socket-container-1 || true
#     - name: stop old container2
#       run: sudo docker container stop socket-container-2 || true
#     - name: stop old container3
#       run: sudo docker container stop socket-container-3 || true

#     - name: Build with Maven
#       run: mvn -B package --file pom.xml

      
#     - name: Delete old container1 
#       run: sudo docker container rm socket-container-1|| true
#     - name: Delete old container2 
#       run: sudo docker container rm socket-container-2|| true
#     - name: Delete old container3 
#       run: sudo docker container rm socket-container-3|| true  

      
#     - name: Delete old image 
#       run:  sudo docker image rm socket|| true

#     - name: Build the Docker image
#       run: sudo docker build -t socket .
      
   
#     - name: Run docker container-1

#       run: sudo docker run -d -p 8080:8080 --name socket-container-1 --network=bridge socket sleep infinity| echo "success"
#     - name: Run docker container-2
#       run: sudo docker run -d -p 9090:8080 --name socket-container-2 --network=bridge socket sleep infinity| echo "success" 
#     - name: Run docker container-3
#       run: sudo docker run -d -p 8000:8080 --name socket-container-3 --network=bridge socket sleep infinity| echo "success" 


# name: Build and Run Spring Boot 

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-run:
#     runs-on: ['self-hosted', 'Linux', 'X64' , 'socket']
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

      # - name: Create jarlocator directory
      #   run: mkdir jarlocator

      # - name: Build and copy app1 jar
      #   run: |
      #     cd app1
      #     mvn clean package
      #     cp target/chat-1.jar ../jarlocator/
          
      # - name: Build and copy app2 jar
      #   run: |
      #     cd app2
      #     ./mvnw clean package
      #     cp target/chat-2.jar ../jarlocator/

      # - name: Build and copy app3 jar
      #   run: |
      #     cd app3
      #     ./mvnw clean package
      #     cp target/chat-3.jar ../jarlocator/

      # - name: Run app1 jar
      #   run: java -jar jarlocator/chat-1.jar &

      # - name: Run app2 jar
      #   run: java -jar jarlocator/chat-2.jar &

      # - name: Run app3 jar
      #   run: java -jar jarlocator/chat-3.jar &

# name: Build and Run Spring Boot

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-run:
#     runs-on: [self-hosted, Linux, X64, socket]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       # - name: Set up JDK 17
#       #   uses: actions/setup-java@v2
#       #   with:
#       #     java-version: '17'

#       - name: Build Maven project
#         run: mvn -B package --file pom.xml

#       # - name: Stop processes on ports 8080, 8000, 9090
#       #   run: |
#       #     killall -9 java || true

#       - name: Stop processes on ports 8080, 8000, 9090
#         run: |
#           pkill -f "java -jar" || true
#           sleep 5  # Wait for processes to terminate

#       - name: Run JAR for 8000 
#         run: |
#           nohup java -jar -Dserver.port=8000 -Dspring.consumer.group-id=group-1 -Dkafka.groupId=group-1 target/websocket-chat-0.0.1-SNAPSHOT.jar &
#       - name: Run JAR for 8080
#         run: |
#           nohup java -jar -Dserver.port=8080 -Dspring.consumer.group-id=group-2 -Dkafka.groupId=group-2 target/websocket-chat-0.0.1-SNAPSHOT.jar &  
#       - name: Run JAR for 9090
#         run: |
#           nohup java -jar -Dserver.port=9090 -Dspring.consumer.group-id=group-3 -Dkafka.groupId=group-3 target/websocket-chat-0.0.1-SNAPSHOT.jar &  



name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: [self-hosted, Linux, X64, socket-1]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Upload file config.properties
      run: cp /home/srivastavharsh2003/config.properties ./src/main/resources 
      
    # - name: Set up JDK 17
    #   uses: actions/setup-java@v2
    #   with:
    #     java-version: '11'
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Grant execute permission to script
      run: chmod +x start_apps.sh
      
    # - name: Install pm2
    #   run: npm install pm2 -g
      
    - name: Run script to start Spring Boot apps with PM2
      run: ./start_apps.sh
      # working-directory: ./path/to/your/scripts/directory
